import { createAsyncThunk, createSlice, SerializedError } from '@reduxjs/toolkit';
import { RootState } from '../store';

import TrackersActions from './trackers.actions';
import Tracker from '../../models/Tracker';
import SliceStatus from '../../models/SliceStatus';

// ===== State

export interface TrackersState {
  error: SerializedError;
  status: SliceStatus;
  trackers?: Tracker[];
}

const initialState: TrackersState = {
  error: {},
  status: SliceStatus.idle,
  trackers: undefined
};

// ===== Thunk

export const fetchAllTrackers = createAsyncThunk('trackers/fetchAllTrackers', async () => {
  const response = await TrackersActions.fetchAll();
  return response.data;
});

// ===== Reducers

export const trackersSlice = createSlice({
  name: 'counter',
  initialState,
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchAllTrackers.pending, (state) => {
        state.status = SliceStatus.loading;
      })
      .addCase(fetchAllTrackers.fulfilled, (state, action) => {
        state.status = SliceStatus.idle;
        state.trackers = action.payload;
      })
      .addCase(fetchAllTrackers.rejected, (state, action) => {
        state.status = SliceStatus.failed;
        state.error = action.error;
      });
  }
});

export default trackersSlice.reducer;
